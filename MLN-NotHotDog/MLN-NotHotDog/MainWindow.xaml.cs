using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.Win32;
using System;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Media.Imaging;

namespace MLN_NotHotDog
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private string[] _labels;
        private PredictionEngine<Input, Output> _predictor;

        // hotdog.zip MUST be in the "Model" directory in order for
        // this application to work. The file is generated by running the
        // MLN-ImageClassification project.
        private static readonly string _modelPath = "..\\..\\..\\Model\\hotdog.zip";

        public MainWindow()
        {
            InitializeComponent();
            this.Loaded += OnLoaded;
        }

        private void OnLoaded(object sender, RoutedEventArgs e)
        {
            // Load a trained image-classification model, create a
            // prediction engine, and get an ordered list of labels
            // for showing prediction results
            var context = new MLContext(seed: 0);
            var model = context.Model.Load(_modelPath, out DataViewSchema schema);
            _predictor = context.Model.CreatePredictionEngine<Input, Output>(model);
            _labels = GetOrderedLabels(_predictor.OutputSchema);
        }

        private void OnSelectImageButtonClicked(object sender, RoutedEventArgs e)
        {
            // Let the user select an image file
            OpenFileDialog dialog = new OpenFileDialog();
            dialog.Filter = "JPEG Files (*.jpg;*.jpeg)|*.jpg;*.jpeg|PNG Files (*.png)|*.png|All Files (*.*)|*.*";
            dialog.FilterIndex = 3;

            if (dialog.ShowDialog() == true)
            {
                // Show the image
                LoadedImage.Source = new BitmapImage(new Uri(dialog.FileName));

                // Load the image into memory
                var encoder = new JpegBitmapEncoder();
                encoder.Frames.Add(BitmapFrame.Create((BitmapImage)LoadedImage.Source));
                var input = new Input();

                using (MemoryStream ms = new MemoryStream())
                {
                    encoder.Save(ms);
                    input.Image = ms.ToArray();
                }
                    
                // Use ML.NET to classify the image
                var prediction = _predictor.Predict(input);
                var label = prediction.PredictedLabel;

                // Show the results
                var builder = new StringBuilder();
                builder.Append($"=== {label.ToUpperInvariant()} ===\n\n");

                for (int i = 0; i < _labels.Length; i++)
                    builder.Append($"{_labels[i]}: {prediction.Score[i]:P1}\n");

                MessageBox.Show(builder.ToString());
            }
        }

        private static string[] GetOrderedLabels(DataViewSchema schema)
        {
            var buffer = new VBuffer<ReadOnlyMemory<char>>();
            schema.GetColumnOrNull("Score").Value.GetSlotNames(ref buffer);
            return buffer.DenseValues().Select(x => x.ToString()).ToArray();
        }
    }

    public class Input
    {
        public byte[] Image;
        public string ImagePath;
        public string Label;
    }

    public class Output
    {
        public float[] Score;
        public string PredictedLabel;
    }
}